const fs = require("fs");
const path = require("path");

// Dossiers source et destination
const sourceDir = path.join(__dirname, "packages/ui-kit/src/components/ui");
const destinationDir = path.join(__dirname, "packages/ui-kit/src/components");

// Mapping des composants vers leurs catégories
const componentsMapping = {
  atoms: [
    "AccordionTrigger",
    "AccordionContent",
    "Alert",
    "AlertTitle",
    "AlertDescription",
    "AspectRatio",
    "Avatar",
    "AvatarImage",
    "AvatarFallback",
    "Badge",
    "BreadcrumbItem",
    "BreadcrumbLink",
    "BreadcrumbPage",
    "BreadcrumbSeparator",
    "BreadcrumbEllipsis",
    "Button",
    "Checkbox",
    "CollapsibleTrigger",
    "CollapsibleContent",
    "CommandInput",
    "CommandEmpty",
    "CommandItem",
    "CommandShortcut",
    "CommandSeparator",
    "ContextMenuItem",
    "ContextMenuCheckboxItem",
    "ContextMenuRadioItem",
    "ContextMenuLabel",
    "ContextMenuSeparator",
    "ContextMenuShortcut",
    "DialogTrigger",
    "DialogClose",
    "DrawerTrigger",
    "DrawerClose",
    "DropdownMenuItem",
    "DropdownMenuCheckboxItem",
    "DropdownMenuRadioItem",
    "DropdownMenuLabel",
    "DropdownMenuSeparator",
    "DropdownMenuShortcut",
    "FormItem",
    "FormLabel",
    "FormControl",
    "FormDescription",
    "FormMessage",
    "HoverCardTrigger",
    "InputOTP",
    "InputOTPSlot",
    "InputOTPSeparator",
    "Input",
    "Label",
    "MenubarItem",
    "MenubarSeparator",
    "MenubarLabel",
    "MenubarCheckboxItem",
    "MenubarRadioItem",
    "MenubarShortcut",
    "NavigationMenuItem",
    "NavigationMenuLink",
    "NavigationMenuIndicator",
    "PaginationLink",
    "PaginationItem",
    "PaginationPrevious",
    "PaginationNext",
    "PaginationEllipsis",
    "PopoverTrigger",
    "RadioGroupItem",
    "ScrollBar",
    "SelectValue",
    "SelectTrigger",
    "SelectLabel",
    "SelectItem",
    "SelectSeparator",
    "SelectScrollUpButton",
    "SelectScrollDownButton",
    "Separator",
    "SheetTrigger",
    "SheetClose",
    "Skeleton",
    "Slider",
    "Switch",
    "TableHeader",
    "TableBody",
    "TableFooter",
    "TableHead",
    "TableRow",
    "TableCell",
    "TableCaption",
    "TabsList",
    "TabsTrigger",
    "TabsContent",
    "Textarea",
    "ToastTitle",
    "ToastDescription",
    "ToastClose",
    "ToastAction",
    "ToggleGroupItem",
    "Toggle",
    "TooltipTrigger",
    "TooltipContent",
  ],
  molecules: [
    "Accordion",
    "AccordionItem",
    "AlertDialog",
    "AlertDialogPortal",
    "AlertDialogOverlay",
    "AlertDialogTrigger",
    "AlertDialogContent",
    "AlertDialogHeader",
    "AlertDialogFooter",
    "AlertDialogTitle",
    "AlertDialogDescription",
    "AlertDialogAction",
    "AlertDialogCancel",
    "Breadcrumb",
    "BreadcrumbList",
    "Calendar",
    "Card",
    "CardHeader",
    "CardFooter",
    "CardTitle",
    "CardDescription",
    "CardContent",
    "Carousel",
    "CarouselContent",
    "CarouselItem",
    "CarouselPrevious",
    "CarouselNext",
    "ChartContainer",
    "ChartTooltip",
    "ChartTooltipContent",
    "ChartLegend",
    "ChartLegendContent",
    "ChartStyle",
    "Collapsible",
    "Command",
    "CommandDialog",
    "CommandList",
    "CommandGroup",
    "ContextMenu",
    "ContextMenuTrigger",
    "ContextMenuContent",
    "ContextMenuGroup",
    "ContextMenuPortal",
    "ContextMenuSub",
    "ContextMenuSubContent",
    "ContextMenuSubTrigger",
    "ContextMenuRadioGroup",
    "Dialog",
    "DialogPortal",
    "DialogOverlay",
    "DialogContent",
    "DialogHeader",
    "DialogFooter",
    "DialogTitle",
    "DialogDescription",
    "Drawer",
    "DrawerPortal",
    "DrawerOverlay",
    "DrawerContent",
    "DrawerHeader",
    "DrawerFooter",
    "DrawerTitle",
    "DrawerDescription",
    "DropdownMenu",
    "DropdownMenuTrigger",
    "DropdownMenuContent",
    "DropdownMenuGroup",
    "DropdownMenuPortal",
    "DropdownMenuSub",
    "DropdownMenuSubContent",
    "DropdownMenuSubTrigger",
    "DropdownMenuRadioGroup",
    "Form",
    "FormField",
    "HoverCard",
    "HoverCardContent",
    "InputOTPGroup",
    "Menubar",
    "MenubarMenu",
    "MenubarTrigger",
    "MenubarContent",
    "MenubarPortal",
    "MenubarSubContent",
    "MenubarSubTrigger",
    "MenubarGroup",
    "MenubarSub",
    "MenubarRadioGroup",
    "NavigationMenu",
    "NavigationMenuList",
    "NavigationMenuTrigger",
    "NavigationMenuContent",
    "NavigationMenuViewport",
    "Pagination",
    "PaginationContent",
    "Popover",
    "PopoverContent",
    "PopoverAnchor",
    "Progress",
    "RadioGroup",
    "ResizablePanelGroup",
    "ResizablePanel",
    "ResizableHandle",
    "ScrollArea",
    "Select",
    "SelectGroup",
    "SelectContent",
    "Sheet",
    "SheetPortal",
    "SheetOverlay",
    "SheetContent",
    "SheetHeader",
    "SheetFooter",
    "SheetTitle",
    "SheetDescription",
    "Tabs",
    "ToastProvider",
    "ToastViewport",
    "Toast",
    "ToggleGroup",
    "Tooltip",
    "TooltipProvider",
  ],
  organisms: ["Toaster"],
};
// Fonction pour déplacer les fichiers
const moveFiles = (componentList, category) => {
  componentList.forEach((component) => {
    const sourcePath = path.join(sourceDir, `${component.toLowerCase()}.tsx`);
    const destinationPath = path.join(
      destinationDir,
      category,
      `${component.toLowerCase()}.tsx`,
    );

    // Vérifier si le fichier existe
    if (fs.existsSync(sourcePath)) {
      // Créer le dossier de destination s'il n'existe pas
      if (!fs.existsSync(path.join(destinationDir, category))) {
        fs.mkdirSync(path.join(destinationDir, category), { recursive: true });
      }

      // Déplacer le fichier
      fs.renameSync(sourcePath, destinationPath);
      console.log(`Déplacé: ${component} vers ${category}`);
    } else {
      console.log(`Fichier non trouvé: ${component}`);
    }
  });
};

function moveDirectory(source, destination) {
  fs.rename(source, destination, (err) => {
    if (err) {
      console.error("Erreur lors du déplacement du dossier:", err);
    } else {
      console.log("Dossier déplacé avec succès");
    }
  });
}

// Déplacer les fichiers pour chaque catégorie
Object.entries(componentsMapping).forEach(([key, value]) => {
  value.forEach((name) => {
    moveDirectory(
      `./src/components/share/${name}`,
      `./src/components/${key}/${name}`,
    );
  });
});
